name: 🚀 Deploy Cal AI Application

on:
  push:
    branches: [ master, main, dev ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - development

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    environment: ${{ github.ref == 'refs/heads/dev' && 'development' || 'production' }}
    
    steps:
    - name: ✅ Checkout Code
      uses: actions/checkout@v4

    - name: ✅ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          server/package-lock.json
          website/package-lock.json

    - name: 📦 Install Server Dependencies
      run: |
        echo "📦 Installing server dependencies..."
        cd server && npm ci && cd ..

    - name: 📦 Install Website Dependencies
      run: |
        echo "📦 Installing website dependencies..."
        cd website && npm ci && cd ..

    - name: 🔍 Determine Environment
      id: env
      run: |
        if [ "${{ github.ref }}" == "refs/heads/dev" ]; then
          echo "environment=development" >> $GITHUB_OUTPUT
          echo "server_host=${{ secrets.DEV_SERVER_HOST || secrets.SERVER_HOST }}" >> $GITHUB_OUTPUT
          echo "server_username=${{ secrets.DEV_SERVER_USERNAME || secrets.SERVER_USERNAME }}" >> $GITHUB_OUTPUT
          echo "server_password=${{ secrets.DEV_SERVER_PASSWORD || secrets.SERVER_PASSWORD }}" >> $GITHUB_OUTPUT
          echo "server_port=${{ secrets.DEV_SERVER_PORT || secrets.SERVER_PORT || '22' }}" >> $GITHUB_OUTPUT
          echo "app_name=cal-ai-dev" >> $GITHUB_OUTPUT
          echo "app_port=9001" >> $GITHUB_OUTPUT
          echo "app_path=/var/www/cal-ai-dev" >> $GITHUB_OUTPUT
          echo "api_url=https://dev.loqmeapp.ir" >> $GITHUB_OUTPUT
        else
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "server_host=${{ secrets.SERVER_HOST }}" >> $GITHUB_OUTPUT
          echo "server_username=${{ secrets.SERVER_USERNAME }}" >> $GITHUB_OUTPUT
          echo "server_password=${{ secrets.SERVER_PASSWORD }}" >> $GITHUB_OUTPUT
          echo "server_port=${{ secrets.SERVER_PORT || '22' }}" >> $GITHUB_OUTPUT
          echo "app_name=cal-ai" >> $GITHUB_OUTPUT
          echo "app_port=9000" >> $GITHUB_OUTPUT
          echo "app_path=/var/www/cal-ai" >> $GITHUB_OUTPUT
          echo "api_url=https://loqmeapp.ir" >> $GITHUB_OUTPUT
        fi

    - name: 🔨 Build Server
      run: |
        echo "🔨 Building server..."
        cd server
        if [ "${{ steps.env.outputs.environment }}" == "development" ]; then
          NODE_ENV=development npm run build
        else
          NODE_ENV=production npm run build
        fi
        cd ..

    - name: 🔨 Build React Website
      run: |
        echo "🔨 Building React website..."
        cd website
        
        # Build React app with environment variables
        if [ "${{ steps.env.outputs.environment }}" == "development" ]; then
          REACT_APP_API_URL=https://dev.loqmeapp.ir/api npm run build
        else
          REACT_APP_API_URL=https://loqmeapp.ir/api npm run build
        fi
        
        # Verify build was successful
        if [ ! -d "build" ]; then
          echo "❌ Error: React build failed - build directory not found"
          exit 1
        fi
        
        echo "✅ React website built successfully"
        cd ..

    # ✅ Deploy backend code
    - name: ✅ Deploy Server Code
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ steps.env.outputs.server_host }}
        username: ${{ steps.env.outputs.server_username }}
        password: ${{ steps.env.outputs.server_password }}
        port: ${{ steps.env.outputs.server_port }}
        script: |
          echo "🔍 Navigating to app path: ${{ steps.env.outputs.app_path }}"
          
          # Create directory if it doesn't exist
          mkdir -p ${{ steps.env.outputs.app_path }}
          cd ${{ steps.env.outputs.app_path }}
          
          # Clone or pull latest code
          if [ ! -d ".git" ]; then
            echo "🔄 Cloning repository..."
            # Remove any existing files first
            rm -rf * .[^.]* 2>/dev/null || true
            git clone ${{ github.server_url }}/${{ github.repository }}.git .
          else
            echo "🔄 Pulling latest code..."
            git fetch origin ${{ steps.env.outputs.environment == 'development' && 'dev' || 'master' }}
            git reset --hard origin/${{ steps.env.outputs.environment == 'development' && 'dev' || 'master' }}
          fi
          
          echo "📦 Installing server dependencies..."
          cd server
          
          # Check if package-lock.json exists, if not use npm install
          if [ -f "package-lock.json" ]; then
            npm ci
          else
            echo "⚠️ No package-lock.json found, using npm install..."
            npm install
          fi
          echo "✅ Dependencies installed"

          echo "🔨 Building server..."
          # Verify package.json exists before building
          if [ ! -f "package.json" ]; then
            echo "❌ Error: package.json not found in server directory"
            ls -la
            exit 1
          fi
          
          npm run build
          
          # Verify build was successful
          if [ ! -d "dist" ]; then
            echo "❌ Error: Build failed - dist directory not found"
            exit 1
          fi
          
          echo "✅ Server built"
          
          # Build React website
          echo "🔨 Building React website..."
          cd ../website
          
          # Install website dependencies if needed
          if [ -f "package-lock.json" ]; then
            npm ci --legacy-peer-deps
          else
            echo "⚠️ No package-lock.json found, using npm install..."
            npm install --legacy-peer-deps
          fi
          
          # Build React app with environment variables
          if [ "${{ steps.env.outputs.environment }}" == "development" ]; then
            REACT_APP_API_URL=https://dev.loqmeapp.ir/api npm run build
          else
            REACT_APP_API_URL=https://loqmeapp.ir/api npm run build
          fi
          
          # Verify website build was successful
          if [ ! -d "build" ]; then
            echo "❌ Error: React build failed - build directory not found"
            exit 1
          fi
          
          echo "✅ React website built successfully"

    # ✅ Setup Environment Variables
    - name: ✅ Setup Environment Variables
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ steps.env.outputs.server_host }}
        username: ${{ steps.env.outputs.server_username }}
        password: ${{ steps.env.outputs.server_password }}
        port: ${{ steps.env.outputs.server_port }}
        script: |
          cd ${{ steps.env.outputs.app_path }}/server
          
          # Create .env file only if it doesn't exist to preserve manual configurations
          if [ ! -f ".env" ]; then
            echo "📝 Creating new .env file..."
            echo "NODE_ENV=${{ steps.env.outputs.environment }}" > .env
            echo "PORT=${{ steps.env.outputs.app_port }}" >> .env
            echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
            echo "API_BASE_URL=${{ steps.env.outputs.api_url }}" >> .env
            echo "CORS_ORIGIN=${{ steps.env.outputs.environment == 'development' && 'http://localhost:3000,https://dev.loqmeapp.ir' || 'https://loqmeapp.ir' }}" >> .env
          else
            echo "✅ Existing .env file found, preserving manual configuration"
          fi
          
          echo "✅ Environment variables configured"

    # ✅ Restart PM2
    - name: ✅ Restart PM2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ steps.env.outputs.server_host }}
        username: ${{ steps.env.outputs.server_username }}
        password: ${{ steps.env.outputs.server_password }}
        port: ${{ steps.env.outputs.server_port }}
        script: |
          echo "🔍 Using app path: ${{ steps.env.outputs.app_path }}/server"
          cd ${{ steps.env.outputs.app_path }}/server

          # Ensure environment is set for the process
          export NODE_ENV=${{ steps.env.outputs.environment }}
          export PORT=${{ steps.env.outputs.app_port }}

          # Start or restart the app with the correct CWD
          if pm2 describe ${{ steps.env.outputs.app_name }} > /dev/null; then
            echo "🔄 Restarting existing PM2 app"
            pm2 restart ${{ steps.env.outputs.app_name }} --update-env
          else
            echo "🚀 Starting PM2 app for the first time"
            pm2 start dist/index.js --name ${{ steps.env.outputs.app_name }} --cwd ${{ steps.env.outputs.app_path }}/server
          fi

          pm2 save
          pm2 status ${{ steps.env.outputs.app_name }}
          echo "✅ PM2 process started/restarted"

    # ✅ Health Check
    - name: ✅ Health Check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ steps.env.outputs.server_host }}
        username: ${{ steps.env.outputs.server_username }}
        password: ${{ steps.env.outputs.server_password }}
        port: ${{ steps.env.outputs.server_port }}
        script: |
          # Allow extra time for the server to boot and perform retries
          echo "⏳ Waiting for application to start..."
          sleep 10
          ATTEMPTS=8
          for i in $(seq 1 $ATTEMPTS); do
            if curl -fsS http://127.0.0.1:${{ steps.env.outputs.app_port }}/api/health > /dev/null; then
              echo "✅ Application is healthy"
              exit 0
            fi
            echo "⌛ Attempt $i/$ATTEMPTS failed, retrying in 5s..."
            sleep 5
          done
          echo "❌ Application health check failed after $ATTEMPTS attempts"
          pm2 logs ${{ steps.env.outputs.app_name }} --lines 20
          exit 1

    # ✅ Deployment Summary
    - name: ✅ Deployment Summary
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "📊 Summary:"
        echo "- Environment: ${{ steps.env.outputs.environment }}"
        echo "- API URL: ${{ steps.env.outputs.api_url }}"
        echo "- App Port: ${{ steps.env.outputs.app_port }}"
        echo "- PM2 App Name: ${{ steps.env.outputs.app_name }}"
        if [ "${{ steps.env.outputs.environment }}" == "development" ]; then
          echo "- Web URL: https://dev.loqmeapp.ir"
        else
          echo "- Web URL: https://loqmeapp.ir"
        fi